This is a temporary todo list. 
It gets changed actively. 

1. math-expressions.js 1.0: 

    Current Idea for a list of kinds of things to add (create more things for it): 
    1. types - everything related to types [includes all insofar added and all yet planned]; 
        has got statistics, numeral-related stuff, counters, orders, linear algebra stuff, infinite types, extension of the oldapi to infinite types (everything)
        ? question: should one not create sub-divisions inside it?
    2. util - various utils; 
    3. ... (perhaps, something related to equation-parsing? some in-built things?)
    4. algorithms - as says, different algorithms; 
        Has in itself sorting algorithms, other interesting ones...
        ? again: question about sub-namespaces...
    5. ... (something that is an extension of the idea of drawing and the current concept for the Surface class)  
    
    // TODO: rework this part of the first TODO...
    New things to add: 

        1. ideas of TrueInteger and all other "True" number classes (those that are capable of theoretically storing arbitrarily large values -- user's machine is the only limit) from an unpublished project;
        2. ideas of Order[s], OrderedArray, IterableSet, generators; note: TypeScript is bad for these things representation, its got Generics, but no templates;
        3. new sorting algorithms, for generalized versions of orders; more new funny/interesting algorithms; 
        4. The previous log, logHack functions (they are quite nice...) and other stuff from 'that other project'

    Old things to (maybe?) delete/rework: 

        1. Tests class (change the naming convention, add Wikipedia links so that one could understand which test is meant, some have such similar names; maybe add a few more interesting things there...)

            note: 

        2. arrayEquality -- rework, generalize to being &&-composition of equality of each of the given arrays pair-wise...
    
    The published thing should be useable as a Deno dependency (via `import`) -- check that it does, indeed, work like one (just in case)...
        
2. Documentation

    Rewrite the introduction; 
    Separate it onto different versions, including <= 0.8 (for each one separate, maybe based on the old readme.md files)

    (Suggestion?) Separate both old and new ones onto classes and functions; 

    Change the in-editor JSDoc documentation...

3. New things: 

    Create a great deal of new definitions; 
// TODO: create ideas for what new stuff to add...

4. Finish the package.json (particular: fix the keywords); 

5. (IDEA; Under question for an implementation) Develop a shorthand-language for various syntax algorithmical syntax constructs ; 

    Make it a part of a library...

    For example: f(a);(b) would be "if a, do b": 
    There could be references and things... 
    Write it using one's (for now unpublished) library for parsing things...


6. (reminder) Before the 1.0 release, pray clear all the TODOs, ?s, *s and !s; 

    All the privatenotes, as well as this very list...

7. Change the comments for the introduction ("this is the source code and copyright" bit at the beginnings of both files); 

8. Decide the look of the comments... (Stars, no stars? other symbols/colors there...) And which ones to keep (so that the code looks navigable...)

9. Change all the desired so JS-classes for the function-object combinations: 

    This is mimicking the behaviour of templates: the abstraction turns into a 
    sequence of "layers" to get called, each allowing for an extension of the thing in question;
    For example, one such is used to generate different "classes" (in truth, constructor functions...)

10. Rename the _ver10.mjs into "math-expressions.js" after having tested it properly; Replace the old file; 

11. Pray add a good descripttion to the GitHub repository...
12. Create each new version of the library in such a fashion as for it to be complete: there is not one thing that could not be done with it and which would want to be done by oneself...;

13. Add the tests to the 'test' folder

    Update the old examples (make them more comprehensible) and create (much) more new ones; 
    
14. Conduct regular note-cleanups, checking if anything has become redundant.

15. IDEA: change the argument order for many of the functions (make them more intuitive;)

    For starters -- the new api, repeatedApplication, for example.