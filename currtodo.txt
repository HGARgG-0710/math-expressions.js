This file contains currently pursued TODOs and self-created tasks for the development of the library...; 

1. Code polishing: 
	1.1. Undetermined yet, go around finishing small undone things and tasks - plenty of those yet... Start preparing the code for testing;
		1.1.1. Algorithm for efficient todo-finishing: 
			Walk over all the '!', 'todo', '?' and '*', consider and fulfill each and every case transiently; 			
	1.2. Refactoring: on-the-spot, anything one can find.  
	1.3. Call the '.function...' on all the CLASSes, EXTENSIONs and so on - all the macros that are, in essence, a wrapper of the TEMPLATE; 
	1.4. Do all the '.this'-ing, when passing, referencing/dereferencing objects too... [consider this matter separately...]; 
	1.5. STYLE: replace all the usages of '(x) => (....)(x)' and such with compositions - use EXCLUSIVELY compositions...; 
	1.6. Create short-names, so as not to have that much of the '.'; 

	NOTE: a point in time (on a task list) must be decided after the coming of which, one moves on to the testing. 
		Decision (regarding the point of time in question) - after 1.3, 1.4 and most (if not all) of 1.1.1, 1.5 and 1.6 would get completed...
	
2. Testing; 
	The library's approaching the v1.0 release; 
	Before it, one desires to first conduct proper (and not like the other times!) testing operations; 

	For this: 

		-1. Do the testing in small pieces of code, rapidly; 
		0. Before testing a particular method, pray first re-look through its code most carefully and think of the design decisions made in it (namely, whether one was satisfied with them insofar or not...); 
		1. Write extensive tests for each and every single thing; 
		2. Test; 
		3. Upon failure, seek out the bug, fix and then return to 2.; 
		4. Upon success, go on to the next piece of code (next method); 

	The entire process oughtn't take more than a few days of dedicated work...

	Before doing the testing, plan - create a list for testing of things; 
	Before that, still - count the definitions and see how much time will be needed for testing (approximately); 
	Each and every one test must be broken down into a descriptive (in a sense that they verify the functionality fully) set of cases. 

3. Documentation: 	
	There are two versions - one for the 'GitHub Wiki' (after making the repository public again), another - the in-editor (it contains references to the full GitHub wiki docs + short introductory descriptions) kind. 

4. Extension of domains: 

	Add the CommonJS modules, work the 'todos.txt' file, final bits of work. 
	After that is done, 'npm publish'!