This file contains currently pursued TODOs and self-created tasks for the development of the library...; 

1. DIRECTIONS; 
	LIST OF CURRENTLY PURSUED TODOS: 
		[First off - the method of choice; The ones considered presently will all be of finishing/reparing/patching/fixing/generalizing/templatizing nature]
		1. Finish NumberEquation (based off the old Equation); 	

		1.1. Finish: 
			1.1.1. NumberEquation; 
			
				1.1.1.1. First, simply understand the old method of work in detail, clean up, basic refactor, reconstruct it anew (with newly decided code practices); 
					1.1.1.1.1. The gist of it has been such - given a string being a sentence in a given language, the langauge is parsed and then converted to a two-side equation. 
							Then, one finds the difference of two sides and finds the values for variables that cause the difference to equal zero; 
							NOTE [1]: the thing works only with 1 sought variable - fix it? 
							The search is numerical purely and is done via manual substitution and decimal approximation; 
							NOTE [2]: this can only be limitedly useful and accurate. One ought to create and implement a class for unlimited decimals and decimal arithmetic; 
							After having computed an array of desired depth of accuracy and found the point of greatest accuracy, it is returned as an approximation for a solution; 
							NOTE [3]: doesn't seem to be taking account of the case of multiple possible answers; [If the case is that there are 2 or more equal smallest differences]
								So instead, return the array of them instaed;  
							NOTE [4]: two sides of the equation; 
								Approximation is currently taken via 'indexof(min|r-l|)'; 
								This strips the method of some degree of accuracy; 
								QUESTION: Make it so that it is possible to calulate it for both the sides [that is - there is the *signed* difference], or not? 
								ANSWER: currently - no; It doesn't give new information in regards of the minimal difference sought;  
							NOTE [5]: It appears to be using eval; Let it use library's 'op' API instead...

							NOTE [6]: The usage of finite strings; Again, as always with finite types - generalize to UnlimitedString [once having finally connected and defined it as an EXTENSION of the GeneralArray;]

				1.1.1.1.2. Then, generalize; 

			1.1.2.? FibonacciHeap [priority N1]; 

			1.1.3. InfiniteNumber [prioritee N1]
			1.1.4. InfiniteString [prioritee N1]

		1.2. Implement: 
			1.2.1. BinomialHeap [priority N1]
			1.2.2. sort.bucket() [priority N1]
			1.2.3. Real [prioritee N2] - make a very brisk sketch that only features the abstract '.'-dot-position + implementations of binary versions of elementary arithmetic operations; 

		
		1.3. Code polishing: 
			1.3.1. Undetermined yet, go around finishing small undone things and tasks - plenty of those yet... Start preparing the code for testing;
				1.3.1.1. This includes new ideas for things to add to the library (for instance, the BinaryArray - for binary arithmetic...); 
			1.3.2. Refactoring all the TrueInteger and InfiniteCounter code that uses elementary objects like '.next().next()...', or '.add().add()...'; 
				Look into that generally pray...
			1.3.3. Complete ALL the TEMPLATEs' defaults and use the 'refactor.defaults' for storing the repeating defaults and referencing them...; 
			1.3.4. Merge (?) the 'multidim' and 'structure' into one module after having generalized the former; 
	
2. Side: Testing; 
	The library's approaching the v1.0 release; 
	Before it, one desires to first conduct proper (and not like the other times!) testing operations; 

	For this: 

		-1. Do the testing in small pieces of code, rapidly; 
		0. Before testing a particular method, pray first re-look through its code most carefully and think of the design decisions made in it (namely, whether one was satisfied with them insofar or not...); 
		1. Write extensive tests for each and every single thing; 
		2. Test; 
		3. Upon failure, rewrite and return to 2.; 
		4. Upon success, go on to the next piece of code (next method); 

	The entire process oughtn't take more than a few days of dedicated work...