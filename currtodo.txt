This file contains currently pursued short-term TODOs and self-created tasks for the development of the library...; 
	
1. Testing; 
	CONCLUSION: original plan for the testing procedure organization did not work out. 
	NEW PLAN [repeat for each and every test]: 

		0. For each test file: 
			1. write the implementation based off the sketch; 
		1. For each test file: 
			1. Run the tests

	Due to the intertwined nature of the library, testing's going to be far quicker with this scheme (as then, one needs not spend additional time on writing the tests themselves, only needing to do the testing itself after they've been written + writing tests takes less time than checking them...); 

	NOTE [additional 1]: 
		Test all the files for workability - the 'math-expressions.mjs', all the derivatives, make sure of ABSOLUTELY EVERYTHING...
	NOTE [additional 2]: 
		Check the rest of package for workability - the package.json, for example. 
		Also - the way that the final NPM package gets assembled (via 'npm pack') - check that it's possible to import it via the 'node_modules' (one of the previous versions was extremely poorly tested in this particular regard, so from now on one does this for every single package...); 
		CHECK THAT IT'S USABLE WITH DENO!!!

2. Documentation [for v1.1.]: 	
	There are two versions - one for the 'GitHub Wiki' (after making the repository public again), another - the in-editor (it contains references to the full GitHub wiki docs + short introductory descriptions) kind. 
	NOTE: base the GitHub documentation on the tests, be thorough;

3. Extension of package domains: 

	Add the CommonJS modules, work the 'todos.txt' file, final bits of work. 
	After that is done, 'npm publish'!
	
	But first (minor things, simple to do...): 
		1. Proper Deno and TypeScript support (perhaps, add it, perhaps not); 

			For it to be possible without user having to do anything, one must provide the according type declarations under node16 (deno).
			ALSO (important) - check correctness of references (import path-strings), apparently, due to 'tsconfig.json', TypeScript and JS Node may look at them slightly differently...

			For this, the only truly needed thing are the proper 'JSDoc's. 
			NOTE: only use the 'object', 'any' (and, only occasionally, 'number', 'boolean', 'string' - in special cases, like defaultTable), all else is unneeded...; 

			
		IDEA: add various types to the package? (For TypeScript programs...)
			DIFFICULTY - these types don't align AT ALL with the results of the code (meaning, they're useless...);  

4. Possible Class Methods for future addition: 

	GeneralArray:
		copyWithin(beginind, endind, targetind) // like Array.copyWithin(), but 0th argument becomes 2nd and the 'endind' is inclusive; 
		reduce(initial, direction, callback) [like Array.reduce(), under question?] // 'direction' would correspond to 'the way' that this thing is working: generalized reduce/reduceRight
		entries() // same as Array.entries, but uses 'generator' for indexes; Note: doesn't 'loop' already do that?
	
	UnlimitedMap:
		entries() // akin to Object.entries()
		